<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>黑月的BLooooog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-08-03T10:03:03.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>黑月</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo + GitHub Pages 构建博客</title>
    <link href="http://yoursite.com/2016/08/03/Hexo-GitHub-Pages-%E6%9E%84%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2016/08/03/Hexo-GitHub-Pages-构建博客/</id>
    <published>2016-08-03T04:54:27.000Z</published>
    <updated>2016-08-03T10:03:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-介绍篇"><a href="#1-介绍篇" class="headerlink" title="1. 介绍篇"></a>1. 介绍篇</h2><p><a href="https://fenglai0802.github.io/" target="_blank" rel="external">DEMO</a></p>
<h4 id="什么是Hexo"><a href="#什么是Hexo" class="headerlink" title="什么是Hexo"></a>什么是Hexo</h4><p><a href="https://hexo.io/" target="_blank" rel="external">Hexo</a> 是一个简单地、轻量地、基于Node的一个静态博客框架，可以方便的生成静态网页。作者是台湾大学生tommy351。</p>
<h4 id="什么是GitHub-Pages"><a href="#什么是GitHub-Pages" class="headerlink" title="什么是GitHub Pages"></a>什么是GitHub Pages</h4><p><a href="https://pages.github.com/" target="_blank" rel="external">GitHub Pages</a> 可以被认为是用户编写的、托管在github上的静态网页。由于它的空间免费稳定， 可以用于介绍托管在github上的Project或者搭建网站。有两种形式: Project Site 和 User/Org Site。</p>
<p>GitHub Pages 生成的网站的默认域名是 username.github.io 或者 username.github.io/project-name ，但GitHub Pages是支持自定义域名的，参考教程：<a href="https://www.zhihu.com/question/31377141" target="_blank" rel="external">github怎么绑定自己的域名</a></p>
<h2 id="2-安装篇"><a href="#2-安装篇" class="headerlink" title="2. 安装篇"></a>2. 安装篇</h2><h4 id="安装中的一些小问题提醒"><a href="#安装中的一些小问题提醒" class="headerlink" title="安装中的一些小问题提醒"></a>安装中的一些小问题提醒</h4><ol>
<li>npm 报连接错误导致的安装失败：建议使用<a href="http://npm.taobao.org/" target="_blank" rel="external">淘宝NPM镜像</a>。</li>
<li>权限错误：命令前加sudo</li>
</ol>
<h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><ul>
<li>安装node (建议采用<a href="https://fenglai0802.github.io/2016/08/03/%E5%88%A9%E7%94%A8%E6%A8%A1%E5%9D%97n%E7%AE%A1%E7%90%86node%E7%89%88%E6%9C%AC/" target="_blank" rel="external">n模块安装</a>)</li>
<li>安装git（安装Xcode自带）</li>
<li>申请github账号</li>
</ul>
<h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><ol>
<li><p>首先全局安装hexo</p>
<pre><code>$ npm install -g hexo
</code></pre></li>
</ol>
<ol>
<li><p>创建工作文件夹，举例命名为<code>blog</code>;</p>
</li>
<li><p>进入<code>blog</code>，初始化：</p>
<pre><code>$ hexo init
</code></pre></li>
</ol>
<p>这里可能出现初始化错误，原因就是默认的npm出现连接错误，你需要手动执行<code>$ cnpm install</code>。<br>cnpm就是淘宝镜像的命令。</p>
<ol>
<li><p>安装server，用于本地调试：</p>
<pre><code>$ cnpm install hexo-server --save
</code></pre></li>
</ol>
<p>如果不安装，现在的版本是不在带服务器的，导致后面执行<code>hexo server</code>报没有命令的错误。</p>
<ol>
<li><p>生成静态页面：</p>
<pre><code>$ hexo generate 或 $ hexo g
</code></pre></li>
<li><p>启动本地服务，进行文章预览调试：</p>
<pre><code>$ $hexo server或 $ hexo s。
</code></pre></li>
</ol>
<p>启动成功，根据提示在浏览器浏览器输入 <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> 即可查看。</p>
<h4 id="hexo一些常用命令-可以通过hexo-help查看-："><a href="#hexo一些常用命令-可以通过hexo-help查看-：" class="headerlink" title="hexo一些常用命令(可以通过hexo help查看)："></a>hexo一些常用命令(可以通过<code>hexo help</code>查看)：</h4><ul>
<li><p><code>hexo new &quot;postName&quot;</code> #新建文章</p>
</li>
<li><p><code>hexo new page &quot;pageName&quot;</code> #新建页面</p>
</li>
<li><p><code>hexo generate</code> #生成静态页面至public目录</p>
</li>
<li><p><code>hexo server</code> #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）</p>
</li>
<li><p><code>hexo deploy</code> #将.deploy目录部署到GitHub</p>
</li>
<li><p><code>hexo help</code> # 查看帮助</p>
</li>
<li><p><code>hexo version</code> #查看Hexo的版本</p>
</li>
</ul>
<h4 id="hexo关联配置Github"><a href="#hexo关联配置Github" class="headerlink" title="hexo关联配置Github"></a>hexo关联配置Github</h4><ul>
<li><p>关联之前，你得先创建好自己的<a href="https://pages.github.com/" target="_blank" rel="external">GitHub Pages</a>，按着官方教程一步步来，或者自己google。</p>
</li>
<li><p>修改<code>blog</code>下的配置文件<code>_config.xml</code>:（repo的地址写你自己的GitHub Pages项目地址啊）</p>
<pre><code>deploy:

     type: git

     repo: https://github.com/fenglai0802/fenglai0802.github.io.git

    branch: master
</code></pre></li>
<li><p>安装发布命令：</p>
<pre><code>$ cnpm install hexo-deployer-git --save
</code></pre></li>
<li><p>执行命名：</p>
<pre><code>$ hexo deploy
</code></pre></li>
</ul>
<p>此时public文件夹下的内容就会被上传到你的github中fenglai0802.github.io的这个项目下。</p>
<ul>
<li><p>然后再浏览器中输入 <a href="https://fenglai0802.github.io/" target="_blank" rel="external">https://fenglai0802.github.io/</a> 就可以查看了。</p>
</li>
<li><p>每次部署的步骤，可按以下三步来进行。(建议自己写一个shell方便发布)</p>
<pre><code>$ hexo clean

$ hexo generate

$ hexo deploy
</code></pre></li>
</ul>
<h2 id="3-hexo主题篇"><a href="#3-hexo主题篇" class="headerlink" title="3. hexo主题篇"></a>3. hexo主题篇</h2><ul>
<li><a href="https://github.com/hexojs/hexo/wiki/Themes" target="_blank" rel="external">主题汇总</a>。使用方法里面也有介绍，简单讲就是把主题克隆到theme文件夹，然后修改_config.yml配置文件中的theme选项就行。</li>
<li>这里比较推荐主题<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">NexT</a>。自用就是这个，哈哈~</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-介绍篇&quot;&gt;&lt;a href=&quot;#1-介绍篇&quot; class=&quot;headerlink&quot; title=&quot;1. 介绍篇&quot;&gt;&lt;/a&gt;1. 介绍篇&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://fenglai0802.github.io/&quot; target=&quot;_blank&quot;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>利用模块n管理node版本</title>
    <link href="http://yoursite.com/2016/08/03/%E5%88%A9%E7%94%A8%E6%A8%A1%E5%9D%97n%E7%AE%A1%E7%90%86node%E7%89%88%E6%9C%AC/"/>
    <id>http://yoursite.com/2016/08/03/利用模块n管理node版本/</id>
    <published>2016-08-03T02:44:47.000Z</published>
    <updated>2016-08-03T10:03:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="利用模块n管理node版本"><a href="#利用模块n管理node版本" class="headerlink" title="利用模块n管理node版本"></a>利用模块n管理node版本</h3><ul>
<li>由于node的版本迭代速度非常快，所以版本多样，所以升级版本或者切换版本都比较麻烦。本文介绍一下模块n的好处。</li>
</ul>
<h5 id="n"><a href="#n" class="headerlink" title="n"></a>n</h5><ul>
<li><p>n是node的一个模块，作者是TJ Holowaychuk（鼎鼎大名的Express框架作者），就像它的名字一样，它的理念就是简单：</p>
<blockquote>
<p>no subshells, no profile setup, no convoluted api, just simple</p>
</blockquote>
</li>
<li><p>安装n</p>
<pre><code>$ sudo npm install -g n
</code></pre></li>
<li><p>安装完成之后，直接输入n后控制台就会输出当前已安装的node版本以及正在使用的版本（前面有个o的），通过上下方向键来选择想要使用的版本，回车生效。</p>
<pre><code>$ n
    0.10.1
o   6.0.0
</code></pre></li>
<li><p>安装指定版本node</p>
<pre><code>$ n 6.0.0
</code></pre></li>
<li><p>安装最新版本node</p>
<pre><code>$ n latest
</code></pre></li>
<li><p>安装稳定版本node</p>
<pre><code>$ n stable
</code></pre></li>
<li><p>删除某个版本</p>
<pre><code>$ n rm 0.10.1
</code></pre></li>
<li><p>以指定的版本来执行脚本</p>
<pre><code>$ n use 0.10.21 some.js
</code></pre></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;利用模块n管理node版本&quot;&gt;&lt;a href=&quot;#利用模块n管理node版本&quot; class=&quot;headerlink&quot; title=&quot;利用模块n管理node版本&quot;&gt;&lt;/a&gt;利用模块n管理node版本&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;由于node的版本迭代速度非常快，所以版
    
    </summary>
    
    
  </entry>
  
</feed>
